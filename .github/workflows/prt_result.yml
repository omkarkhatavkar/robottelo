### The prt result workflow triggered through dispatch request from CI
name: post-prt-result

# Run on workflow dispatch from CI
on:
  workflow_dispatch:
    inputs:
      pr_number:
        type: string
        description: pr number for PRT run
      build_number:
        type: string
        description: build number for PRT run
      pytest_result:
        type: string
        description: pytest summary result line
      build_status:
        type: string
        description: status of jenkins build e.g. success, unstable or error


jobs:
  auto-tag-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Add last PRT result into the github comment
        id: add-prt-comment
        if: ${{ always() && github.event.inputs.pytest_result != '' }}
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            Build Number: ${{ github.event.inputs.build_number }}
            Build Status: ${{ github.event.inputs.build_status }}
            Test Result : ${{ github.event.inputs.pytest_result }}
          pr_number: ${{ github.event.inputs.pr_number }}
          GITHUB_TOKEN: ${{ secrets.CHERRYPICK_PAT }}

      - name: Add the PRT passed/failed status
        id: prt-status
        if: ${{ always() && github.event.inputs.build_status != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.CHERRYPICK_PAT }}
          script: |
            const status = "${{ github.event.inputs.build_status }}";
            const response = await github.rest.issues.get({
              issue_number: ${{ github.event.inputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            if (status === "success") {
              github.rest.issues.addLabels({
                issue_number:  ${{ github.event.inputs.pr_number }},
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels:["PRT-Passed"]
              })
              # Check if the label exists using GitHub API
              const labelExists = response.data.labels.some(label => label.name === 'PRT-Failed');
              if (label_exists){
                github.rest.issues.removeLabel({
                  issue_number: ${{ github.event.inputs.pr_number }},
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels:["PRT-Failed"]
                })
              }
            }
            else{
              github.rest.issues.addLabels({
                issue_number: ${{ github.event.inputs.pr_number }},
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ["PRT-Failed"]
              })
              # Check if the label exists using GitHub API
              const labelExists = response.data.labels.some(label => label.name === 'PRT-Passed');
              if (label_exists){
                github.rest.issues.removeLabel({
                  issue_number: ${{ github.event.inputs.pr_number }},
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels:["PRT-Passed"]
                })
              }
            }
                })
              }
            }
